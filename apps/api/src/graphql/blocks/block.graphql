
type Query {

  latestBlocks(limit: Int): [BlockSummary]

  blocks(limit: Int, page: Int, fromBlock: Long): [Block]
  blockByHash(hash: String): Block
  blockByNumber(number: Int): Block
  minedBlocksByAddress(address: String, limit: Int, page: Int): [Block]
  totalNumberOfBlocks: BigNumber!
}

type Subscription {
  newBlock: BlockSummary
  isSyncing: Boolean
}

type BlockSummary {
  number: BigNumber
  hash: String
  author: String
  numSuccessfulTxs: BigNumber
  numFailedTxs: BigNumber
  reward: BigNumber
}

type Block {
  header: BlockHeader
  transactions: [Transaction]
  uncles: [Uncle]
  rewards: [Reward]
}

type BlockHeader {
  number: BigNumber
  hash: String
  parentHash: String
  nonce: BigNumber
  sha3Uncles: String
  logsBloom: String
  transactionsRoot: String
  stateRoot: String
  receiptsRoot: String
  author: String
  difficulty: BigNumber
  totalDifficulty: BigNumber
  extraData: String
  gasLimit: BigNumber
  gasUsed: BigNumber
  timestamp: String
  size: String
  blockTime: String
  uncleHashes: [String]
  transactionHashes: [String]
}

type Reward {
  address: String
  blockHash: String
  deltaType: DeltaType
  amount: BigNumber
}
